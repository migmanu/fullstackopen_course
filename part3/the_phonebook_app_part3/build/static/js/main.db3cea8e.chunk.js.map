{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Filter.js","components/ShowPersons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","personService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","erase","delete","PersonForm","props","onSubmit","event","names","persons","map","person","name","preventDefault","personObject","newName","number","newNumber","some","matchName","matchPersonObject","filter","matchPerson","window","confirm","alert","newPersons","noMatchPersons","returnedPerson","setPersons","concat","setNewName","setNewNumber","setToShow","setGUIMessage","setTimeout","catch","toShow","value","onChange","handleNewName","handleNewNumber","type","Filter","search","handleSearch","ShowPersons","onClick","item","handleErase","Notification","message","charAt","className","App","useState","setSearch","errorMessage","useEffect","initialPersons","showElements","elementMatchArray","forEach","element","substring","length","toLowerCase","push","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db3cea8e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst erase = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst personService = {\n    getAll,\n    create,\n    update,\n    erase\n}\n\nexport default personService","import React from 'react'\nimport personService from '../services/persons'\n\nconst PersonForm = (props) => {\n  /* Displays form to input new person. Makes POST HTML (create) request to server via personService \n  and updates 'person' and 'toShow' states. In case new name si already in list, it offers to update\n  number via PUT (update) request or ignores submission.\n   */\n    const addPerson = (event) => {\n        let names = props.persons.map(person => person.name)\n        event.preventDefault()\n\n        const personObject = {\n          name: props.newName,\n          number: props.newNumber \n        }\n        if (names.some((matchName) => matchName === props.newName)) {\n          let matchPersonObject = props.persons.filter((matchPerson) => matchPerson.name === props.newName)\n          // user prommted alert about repeated name. If they choose not to update number app returns nothing\n          if (window.confirm(`Hey, \"${props.newName}\" is already in the Phonebook. Wanna update number?`) === false) {\n            return window.alert('Ok, I guess... Then, please just use a different name')\n          }\n          let newPersons = props.persons.filter((noMatchPersons) => noMatchPersons.name !== props.newName)\n          personService\n              .update(matchPersonObject[0].id, personObject)\n              .then(returnedPerson => {\n                props.setPersons(newPersons.concat(returnedPerson))\n                props.setNewName('')\n                props.setNewNumber('')\n                props.setToShow(newPersons.concat(returnedPerson))\n                props.setGUIMessage(`Success: ${personObject.name}'s phone has been updated`)\n                setTimeout(() => {\n                  props.setGUIMessage(null)\n                }, 5000)\n              })\n              .catch(() => {\n                props.setGUIMessage(`Fail: ${personObject.name}'s info has already been removed from Phonebook`)\n                setTimeout(() => {\n                    props.setGUIMessage(null)\n                }, 5000)\n                })\n    \n        } else {\n          personService\n          .create(personObject)\n          .then(returnedPerson => {\n            props.setPersons(props.persons.concat(returnedPerson))\n            props.setNewName('')\n            props.setNewNumber('')\n            props.setToShow(props.toShow.concat(returnedPerson))\n            props.setGUIMessage(`Success: ${personObject.name} has been added to the Phonebook`)\n            setTimeout(() => {\n              props.setGUIMessage(null)\n            }, 5000)\n          })\n        }\n\n        \n      }\n\n    return (\n      <div>\n        <form onSubmit={addPerson}>\n          <div>\n            Name: <input value={props.newName} \n            onChange={props.handleNewName} />\n          </div>\n          <div>\n            Number: <input value={props.newNumber}\n            onChange={props.handleNewNumber} />\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n      </div>\n    )\n\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = (props) => {\n    return(\n        <div>\n            Filter contacts by name: <input value={props.search}\n            onChange={props.handleSearch}/>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\nimport personService from '../services/persons'\n\nconst ShowPersons = (props) => {\n    //  returns list of persons to show. Input: array of persons objects. Provides erase button\n    const handleErase = personObject => {\n        // erases person object from toShow list using erase method defined in services/persons.js\n        if (window.confirm('U sure u never gonna call them?')) {\n            personService\n                .erase(personObject.id)\n                .then(() => {\n                    props.setPersons(props.persons.filter((item) => item.id !== personObject.id))\n                    props.setToShow(props.toShow.filter((item) => item.id !== personObject.id))    \n                })\n            }\n    }\n\n    return (\n        <div>\n            <ul>\n                {props.toShow.map(personObject =>\n                    <li key={personObject.name}>\n                        {personObject.name}  {personObject.number} &nbsp;\n                        <button onClick={() => handleErase(personObject)}>erase</button>\n                    </li>)\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default ShowPersons","import React from 'react';\n\nconst Notification = ({ message }) => {\n    /*\n    basic component tfor displaying message to user. If message starts with 'Success', displays lightblue\n    message. If it starts with 'Fail' displays red message. Input: string message.\n     */\n    if (message === null) {\n        return null\n    }\n\n    if (message.charAt(0) === 'S') {\n        return (\n            <div className=\"success\">\n                {message}\n            </div>\n        )\n    }\n\n    if (message.charAt(0) === 'F') {\n        return (\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n    \n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport ShowPersons from './components/ShowPersons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [ toShow, setToShow] = useState(persons)\n  const [ errorMessage, setGUIMessage] = useState(null)\n\n  useEffect(() => {\n    /* fetches persons array from local server using personService (/services/persons.js). \n    Sets persons and toShow states so the app displays whole name list while no search is \n    performed in contacts filter  */\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        setToShow(initialPersons)\n      })\n  }, [])\n\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value) \n  }\n \n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n    showElements(event.target.value, persons)\n  }\n\n  const showElements = (search, persons) => {\n    //compares search state with persons names. Case insensitive. Returns array with matched elements.  \n    const elementMatchArray = []\n    persons.forEach(element => {\n      if (element.name.substring(0, search.length).toLowerCase() === search.toLowerCase()) {\n        elementMatchArray.push({name: element.name, number: element.number, id: element.id})\n        }\n      }\n    )\n    setToShow(elementMatchArray)\n  }\n \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter search={search} handleSearch={handleSearch} />\n      <h3>Add new</h3>\n      <PersonForm persons={persons} setPersons={setPersons} newName={newName} setNewName={setNewName} \n        newNumber={newNumber} setNewNumber={setNewNumber} toShow={toShow} setToShow={setToShow} \n        handleNewName={handleNewName} handleNewNumber={handleNewNumber} setGUIMessage={setGUIMessage} />\n      <h3>Numbers</h3>\n      <ShowPersons toShow={toShow} setToShow={setToShow} persons={persons} setPersons={setPersons}\n      setGUIMessage={setGUIMessage} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}